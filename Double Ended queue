#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct DLL
{
int info;
struct DLL*next,*prev;
};
typedef struct DLL dll;


dll*insert_first(dll*head,int k)
{
dll*temp=(dll*)malloc(sizeof(temp));
if(temp==NULL)
{
printf("malloc error\n");
exit(0);
}
else if(head==NULL)
{
temp->info=k;
temp->next=temp->prev=NULL;
head=temp;
return head;
}
else
{
temp->info=k;
temp->prev=NULL;
head->prev=temp;
temp->next=head;
head=temp;

return head;
}
}



dll*delete_first(dll*head,int*k)
{
if(head==NULL)
{
printf("list is empty");
return 0;
}
else
{
dll*t1=head;
*k=t1->info;
head=head->next;
head->prev=NULL;
free(t1);
return head;
}
}

dll*insert_last(dll*head,int k)
{
dll*t1;
dll*temp=(dll*)malloc(sizeof(temp));
if(temp==NULL)
{
printf("malloc error\n");
exit(0);
}
else if(head==NULL)
{

temp->info=k;
temp->next=temp->prev=NULL;
head=temp;
return head;
}
else
{
t1=head;
while(t1->next!=NULL)
t1=t1->next;
temp->info=k;
temp->next=NULL;
temp->prev=t1;
t1->next=temp;
return head;
}
}


dll*delete_last(dll*head,int *k)
{
if(head==NULL)
{
printf("list is empty");
return 0;
}
else
{
dll*t1,*t2;
t1=head;
while(t1->next!=NULL)
{
t2=t1;

t1=t1->next;
}
if(t1==head)
{
*k=t1->info;
head->next=head->prev=NULL;
free(t1);
return head;
}
else
{
*k=t1->info;
free(t1);
t2->next=NULL;
return head;
}

}
}


dll*insert_nth(dll*head,int k,int pos)
{
dll*t1,*t2;
dll*temp=(dll*)malloc(sizeof(temp));
if(temp==NULL)
{
printf("malloc error\n");
exit(0);
}
else if(head==NULL)
{
temp->info=k;

temp->next=temp->prev=NULL;
head=temp;
return head;
}
else if(pos==1)
return insert_first(head,k);
else if(pos>count(head))
return insert_last(head,k);
else
{
t1=head;
while(pos-2>0)
{
t1=t1->next;
t2=t1;
pos--;
}
temp->info=k;
temp->prev=t1;
temp->next=t1->next;
t1=t1->next;
t1->prev=temp;
t2->next=temp;
return head;
}
}
int display(dll*head)
{
dll*t;
t=head;
while(t->next!=NULL)
{
printf("%d\n",t->info);
t=t->next;
}
printf("%d\n",t->info);
return 0;
}
int count(dll*head)
{
int c=0;
dll*t1=head;
if(head)
{
do
{
c++;
t1=t1->next;
}while(t1->next!=NULL);
c++;
}

return c;
}



int main()
{
int i,k,*a,p,b;
dll*head=NULL;
clrscr();
while(1)
{

printf("1.insert_front\t2.delete_front\t3.insert_last\t4.delete_last\t5.display\t6.insert_nth\t7.exit\t
8.count");

scanf("%d",&i);
switch(i)
{
case 1:printf("Enter a number");
scanf("%d",&k);
head=insert_first(head,k);
break;
case 2:head=delete_first(head,&a);
break;
case 3: printf("Enter a number");
scanf("%d",&k);
head=insert_last(head,k);
break;
case 4:head=delete_last(head,&a);
break;
case 5:display(head);
break;
case 6: printf("Enter a number");
scanf("%d",&k);
printf("Enter the position");
scanf("%d",&p);
head=insert_nth(head,k,p);
break;
case 7:exit(0);
case 8:b=count(head);
printf("%d",b);

}
}
return 0;
getch();
}
